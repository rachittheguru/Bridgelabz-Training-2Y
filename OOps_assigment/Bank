import java.util.*;
private double balance;


public BankAccount(String acc,String holder,double balance){ this.accountNumber = acc; this.holderName = holder; this.balance = balance; }
public String getAccountNumber(){ return accountNumber; }
public String getHolderName(){ return holderName; }
public double getBalance(){ return balance; }
protected void setBalance(double b){ this.balance = b; }


public void deposit(double amount){ if(amount>0) setBalance(getBalance()+amount); }
public boolean withdraw(double amount){ if(amount>0 && getBalance() >= amount){ setBalance(getBalance()-amount); return true;} return false; }


public abstract double calculateInterest();{
    
}



interface Loanable{
boolean applyForLoan(double amount);
double calculateLoanEligibility();
}


class SavingsAccount extends BankAccount implements Loanable{
public SavingsAccount(String acc,String holder,double bal){ super(acc,holder,bal); }
@Override public double calculateInterest(){ return getBalance() * 0.04; }
@Override public boolean applyForLoan(double amount){ return calculateLoanEligibility() >= amount; }
@Override public double calculateLoanEligibility(){ return getBalance() * 2; }
}


class CurrentAccount extends BankAccount{
public CurrentAccount(String acc,String holder,double bal){ super(acc,holder,bal); }
@Override public double calculateInterest(){ return 0; }
}


public class BankingDemo{
public static void main(String[] args){
List<BankAccount> accounts = Arrays.asList(
new SavingsAccount("S100","Rachit",50000),
new CurrentAccount("C200","Asha",20000)
);


for(BankAccount a : accounts){
System.out.printf("%s: balance=%.2f, interest=%.2f\n", a.getHolderName(), a.getBalance(), a.calculateInterest());
if(a instanceof Loanable){
Loanable l = (Loanable)a;
System.out.println(" Loan eligibility: " + l.calculateLoanEligibility());
}
}
}
}